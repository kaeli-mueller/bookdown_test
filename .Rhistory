install.packages("tinytex")
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
install.packages("tlmgr")
tinytex::reinstall_tinytex()
tinytex::reinstall_tinytex()
tinytex::reinstall_tinytex()
tinytex::install_tinytex()
knitr::opts_chunk$set(echo = TRUE)
HANPP_master <- dbConnect(drv = RSQLite::SQLite(),
"C:/Users/Kaeli/Documents/Computational_Methods/HANPP_database")
knitr::opts_chunk$set(echo = TRUE)
HANPP_master <- dbConnect(drv = RSQLite::SQLite(),
"C:/Users/Kaeli/Documents/Computational_Methods/HANPP_database")
#install packages
#install.packages("RSQLite")
#prepare libraries
library(DBI)
library(RSQLite)
HANPP_master <- dbConnect(drv = RSQLite::SQLite(),
"C:/Users/Kaeli/Documents/Computational_Methods/HANPP_database")
HANPP_master <- dbConnect(drv = RSQLite::SQLite(),                   "C:/Users/Kaeli/Documents/Computational_Methods/HANPP_database")
HANPP_master <- dbConnect(drv = RSQLite::SQLite(),                   "C:/Users/Kaeli/Documents/Computational_Methods/HANPP_database", synchronous = NULL)
HANPP_master <- dbConnect(drv = RSQLite::SQLite(),                   "C:/Users/Kaeli/Documents/Computational_Methods/HANPP_database.db", synchronous = NULL)
dbGetQuery(conn = HANPP_master, statement = "SELECT * FROM dragons LIMIT 10;")
dbGetQuery(conn = HANPP_database, statement = "SELECT * FROM HANPP_master LIMIT 10;")
HANPP_master <- dbConnect(drv = RSQLite::SQLite(),                   "C:/Users/Kaeli/Documents/Computational_Methods/HANPP_database.db", synchronous = NULL)
dbGetQuery(conn = HANPP_database, statement = "SELECT * FROM HANPP_master LIMIT 10;")
HANPP_db <- dbConnect(drv = RSQLite::SQLite(),                   "C:/Users/Kaeli/Documents/Computational_Methods/HANPP_database.db", synchronous = NULL)
HANPP_db <- dbConnect(drv = RSQLite::SQLite(),                   "C:/Users/Kaeli/Documents/Computational_Methods/HANPP_database.db", synchronous = NULL)
dbGetQuery(conn = HANPP_db, statement = "SELECT * FROM HANPP_master LIMIT 10;")
HANPP_db <- dbConnect(drv = RSQLite::SQLite(),                   "C:/Users/Kaeli/Documents/Computational_Methods/HANPP_database.db", synchronous = NULL)
dbGetQuery(conn = HANPP_db, statement = "SELECT * FROM HANPP_master LIMIT 10;")
dbGetQuery(conn = HANPP_db, statement = "SELECT * FROM NPPeco_biodiversity_county LIMIT 10;")
HANPP_main <- dbGetQuery(conn = HANPP_db, statement = "SELECT * FROM HANPP_master LIMIT 10;")
dbExecute(HANPP_db, "DROP TABLE HANPP_main")
knitr::opts_chunk$set(echo = TRUE)
#install packages
#install.packages("RSQLite")
#prepare libraries
library(DBI)
library(RSQLite)
HANPP_db <- dbConnect(drv = RSQLite::SQLite(),                   "C:/Users/Kaeli/Documents/Computational_Methods/HANPP_database.db", synchronous = NULL)
HANPP_main <- dbGetQuery(conn = HANPP_db, statement = "SELECT * FROM HANPP_master LIMIT 10;")
knitr::include_graphics("img/C:/Users/Kaeli/Documents/Computational_Methods/Screenshot_database_schema.jpg")
setwd("C:/Users/Kaeli/Documents/Computational_Methods/")
getwd()
knitr::include_graphics("img/Screenshot_database_schema.jpg")
knitr::include_graphics("img/Screenshot_database_schema.jpg")
![Schema for the database](Screenshot_database_schema.jpg)
![Schema for the database](C:/Users/Kaeli/Documents/Computational_Methods/Screenshot_database_schema.jpg)
![ Schema for the database](C:/Users/Kaeli/Documents/Computational_Methods/Screenshot_database_schema.jpg)
knitr::include_graphics("img/Screenshot_database_schema.jpg")
knitr::include_graphics("C:/Users/Kaeli/Documents/Computational_Methods/img/Screenshot_database_schema.jpg")
HANPP_db <- dbConnect(drv = RSQLite::SQLite(),                   "C:/Users/Kaeli/Documents/Computational_Methods/HANPP_database.db", synchronous = NULL)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/Kaeli/Documents/Computational_Methods/")
getwd()
#install packages
#install.packages("RSQLite")
#prepare libraries
library(DBI)
library(RSQLite)
HANPP_db <- dbConnect(drv = RSQLite::SQLite(),                   "C:/Users/Kaeli/Documents/Computational_Methods/HANPP_database.db", synchronous = NULL)
HANPP_main <- dbGetQuery(conn = HANPP_db, statement = "SELECT * FROM HANPP_master LIMIT 10;")
class(HANPP_main)
class(HANPP_db)
class(dragons)
#establish database connection ####
dragons_db <- dbConnect(drv = RSQLite::SQLite(),
"..//dragons_test_repo//dragons_test_repo//dragon_copy.db")
class(dragons_db)
#How to run a query through RSQLite ####
#Retrieve data from the database ####
dbGetQuery(conn = dragons_db, statement = "SELECT * FROM dragons LIMIT 10;")
knitr::include_graphics("img/C:/Users/Kaeli/Documents/Computational_Methods/Screenshot_database_schema.jpg")
knitr::include_graphics("img/Screenshot_database_schema.jpg")
![Schema for the database](C:/Users/Kaeli/Documents/Computational_Methods/Screenshot_database_schema.jpg)
knitr::opts_chunk$set(echo = TRUE)
remotes::install_github("geocompr/geocompkg")
GDALinfo(here("C:/Users/Kaeli/Documents/Geospatial_Analysis/NEON-DS-Airborne-Remote-Sensing/HARV/DSM","HARV_dsmCrop.tif"))
install.packages("GDAL")
install.packages("Rtools")
GDALinfo(here("C:/Users/Kaeli/Documents/Geospatial_Analysis/NEON-DS-Airborne-Remote-Sensing/HARV/DSM","HARV_dsmCrop.tif"))
install.packages("GDAL")
install.packages("raster")
install.packages("GDAL")
version
install.packages("raster")
install.packages("terra")
library(raster)
library(terra)
GDALinfo(here("C:/Users/Kaeli/Documents/Geospatial_Analysis/NEON-DS-Airborne-Remote-Sensing/HARV/DSM","HARV_dsmCrop.tif"))
library(raster)
library(terra)
library(sp)
library(sf)
GDALinfo(here("C:/Users/Kaeli/Documents/Geospatial_Analysis/NEON-DS-Airborne-Remote-Sensing/HARV/DSM","HARV_dsmCrop.tif"))
install.packages("raster")
install.packages("raster")
knitr::opts_chunk$set(echo = TRUE)
library(sp)
library(raster)
library(terra)
library(sp)
library(sf)
library(sf)
GDALinfo(here("C:/Users/Kaeli/Documents/Geospatial_Analysis/NEON-DS-Airborne-Remote-Sensing/HARV/DSM","HARV_dsmCrop.tif"))
knitr::opts_chunk$set(echo = TRUE)
library(raster)
library(terra)
library(sp)
library(sf)
GDALinfo(here("C:/Users/Kaeli/Documents/Geospatial_Analysis/NEON-DS-Airborne-Remote-Sensing/HARV/DSM","HARV_dsmCrop.tif"))
GDALinfo("C:/Users/Kaeli/Documents/Geospatial_Analysis/NEON-DS-Airborne-Remote-Sensing/HARV/DSM","HARV_dsmCrop.tif")
??terra
GDALinfo("C:/Users/Kaeli/Documents/Geospatial_Analysis/NEON-DS-Airborne-Remote-Sensing/HARV/DSM","HARV_dsmCrop.tif")
install.packages("rgdal")
library(rgdal)
GDALinfo("C:/Users/Kaeli/Documents/Geospatial_Analysis/NEON-DS-Airborne-Remote-Sensing/HARV/DSM","HARV_dsmCrop.tif")
CROPS_DSM <- raster("C:/Users/Kaeli/Documents/Geospatial_Analysis/CDL_2016_clip_20210301165537_442576959/","CDL_2016_clip_20210301165537_442576959.tif")
CROPS_DSM <- raster("C:/Users/Kaeli/Documents/Geospatial_Analysis/CDL_2016_clip_20210301165537_442576959/CDL_2016_clip_20210301165537_442576959.tif")
library(mapview)
rast(CROPS_DSM)
mapview(CROPS_DSM)
municipalities <- st_read("C:/Users/Kaeli/Documents/Geospatial_Analysis/Utah_Municipal_Boundaries/Utah_Municipal_Boundaries.shp")
install.packages("here")
library(here)
crs(CROPS_DSM)
crops_raster <- projectRaster(CROPS_DSM,
crs = crs(CROPS_DSM),
res = res(CROPS_DSM))
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/Kaeli/Documents/Computational_Methods/")
getwd()
![Schema for the database]("C:/Users/Kaeli/Documents/Computational_Methods/Screenshot_database_schema.jpg")
HANPP_db <- dbConnect(drv = RSQLite::SQLite(),
"C:/Users/Kaeli/Documents/Computational_Methods/HANPP_database.db", synchronous = NULL)
#install packages
#install.packages("RSQLite")
#prepare libraries
library(DBI)
library(RSQLite)
HANPP_db <- dbConnect(drv = RSQLite::SQLite(),
"C:/Users/Kaeli/Documents/Computational_Methods/HANPP_database.db", synchronous = NULL)
HANPP_main <- dbGetQuery(conn = HANPP_db, statement = "SELECT * FROM HANPP_master LIMIT 10;")
dbListTables(HANPP_main)
HANPP_db <- dbConnect(drv = RSQLite::SQLite(),
"C:/Users/Kaeli/Documents/Computational_Methods/HANPP_database.db", synchronous = NULL)
HANPP_main <- dbGetQuery(conn = HANPP_db, statement = "SELECT * FROM HANPP_master LIMIT 10;")
dbListTables(HANPP_main)
dbListTables(HANPP_db)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/Kaeli/Documents/Computational_Methods/")
getwd()
knitr::include_graphics("img/Screenshot_database_schema.jpg")
knitr::include_graphics("C:/Users/Kaeli/Documents/Computational_Methods/Screenshot_database_schema.jpg")
#install packages
#install.packages("RSQLite")
#prepare libraries
library(DBI)
library(RSQLite)
HANPP_db <- dbConnect(drv = RSQLite::SQLite(),
"C:/Users/Kaeli/Documents/Computational_Methods/HANPP_database.db", synchronous = NULL)
HANPP_main <- dbGetQuery(conn = HANPP_db, statement = "SELECT * FROM HANPP_master LIMIT 10;")
dbListTables(HANPP_db)
class(HANPP_db)
HANPP_db <- dbConnect(drv = RSQLite::SQLite(),
"C:/Users/Kaeli/Documents/Computational_Methods/HANPP_database.db", synchronous = NULL)
HANPP_main <- dbGetQuery(conn = HANPP_db, statement = "SELECT * FROM HANPP_master LIMIT 10;")
```{r}
HANPP_main <- dbGetQuery(conn = HANPP_db, statement = "SELECT * FROM HANPP_master LIMIT 10;")
class(HANPP_db)
dbListTables(HANPP_main)
HANPP_db <- dbConnect(drv = RSQLite::SQLite(),
"C:/Users/Kaeli/Documents/Computational_Methods/HANPP_database.db")
HANPP_db <- dbConnect(drv = RSQLite::SQLite(),
"C:/Users/Kaeli/Documents/Computational_Methods/HANPP_database.db", 'synchronous' = NULL)
class(HANPP_db)
HANPP_db <- dbConnect(drv = RSQLite::SQLite(),
"C:/Users/Kaeli/Documents/Computational_Methods/HANPP_database.db", 'synchronous' = NULL)
HANPP_db <- dbConnect(drv = RSQLite::SQLite(),
"C:/Users/Kaeli/Documents/Computational_Methods/HANPP_database.db")
HANPP_main <- dbGetQuery(conn = HANPP_db, statement = "SELECT * FROM HANPP_master LIMIT 10;")
class(HANPP_db)
dbListTables(HANPP_db)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/Kaeli/Documents/Computational_Methods/")
getwd()
knitr::include_graphics("C:/Users/Kaeli/Documents/Computational_Methods/Screenshot_database_schema.jpg")
#install packages
#install.packages("RSQLite")
#prepare libraries
library(DBI)
library(RSQLite)
HANPP_db <- dbConnect(drv = RSQLite::SQLite(),
"C:/Users/Kaeli/Documents/Computational_Methods/HANPP_database.db")
